# -*- coding: utf-8 -*-
"""Air Quality prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1arr8IA4SneqI3KZuOnNKUvr_Qik9ASFu
"""

# Import necessary libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# Generate synthetic data for demonstration purposes
# In a real-world scenario, you would use a dataset with actual air quality data
np.random.seed(42)
num_samples = 1000

temperature = np.random.uniform(10, 30, num_samples)
pressure = np.random.uniform(1000, 1020, num_samples)
humidity = np.random.uniform(20, 80, num_samples)
air_quality = 5 * temperature + 3 * pressure - 2 * humidity + np.random.normal(0, 5, num_samples)

# Create a DataFrame from the synthetic data
data = pd.DataFrame({'Temperature': temperature, 'Pressure': pressure, 'Humidity': humidity, 'AirQuality': air_quality})

# Split the data into features (X) and target variable (y)
X = data[['Temperature', 'Pressure', 'Humidity']]
y = data['AirQuality']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a linear regression model
model = LinearRegression()

# Train the model
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

# Visualize the predictions
plt.scatter(y_test, y_pred)
plt.xlabel('Actual Air Quality')
plt.ylabel('Predicted Air Quality')
plt.title('Air Quality Prediction - Linear Regression')
plt.show()

user_temperature = float(input("Enter temperature value: "))
user_humidity = float(input("Enter humidity value: "))
user_pressure = float(input("Enter pressure value: "))

# Define thresholds for air quality conditions
temperature_threshold = 20  # Adjust as needed
humidity_threshold = 40  # Adjust as needed
pressure_threshold = 60  # Adjust as needed

# Check air quality conditions
if user_temperature < temperature_threshold and user_humidity < humidity_threshold and user_pressure > pressure_threshold:
    predicted_air_quality = 'good'
else:
    predicted_air_quality = 'bad'

print("Predicted Air Quality:", predicted_air_quality)

import pickle

# Save the trained model to a file using pickle
model_filename = 'linear_regression_model.pkl'
with open(model_filename, 'wb') as model_file:
    pickle.dump(model, model_file)

print(f"Trained model saved to {model_filename}")

# Load the trained model from the file
with open(model_filename, 'rb') as model_file:
    loaded_model = pickle.load(model_file)

# Now you can use the loaded_model for making predictions